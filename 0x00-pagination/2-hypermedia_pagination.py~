#!/usr/bin/env python3
''' Implement a get_hyper method that takes
the same arguments (and defaults) as get_page
and returns a dictionary
'''

import csv
import math
from typing import List
from typing import Tuple


def index_range(page: int, page_size: int) -> Tuple[int, int]:
    """ function returns a tuple of size
    two containing a start index and an end index
    corresponding to the range of indexes to return
    in a list for those particular pagination parameters.
    """
    start_index = (page - 1) * page_size
    end_index = start_index + page_size

    return (start_index, end_index)


class Server:
    """Server class to paginate a database of popular baby names.
    """
    DATA_FILE = "Popular_Baby_Names.csv"

    def __init__(self):
        self.__dataset = None

    def dataset(self) -> List[List]:
        """Cached dataset
        """
        if self.__dataset is None:
            with open(self.DATA_FILE) as f:
                reader = csv.reader(f)
                dataset = [row for row in reader]
            self.__dataset = dataset[1:]

        return self.__dataset

    def get_page(self, page: int = 1, page_size: int = 10) -> List[List]:
        """ takes two integer arguments page with
        default value 1 and page_size with default value 10.
        """
        assert type(page) == int and page > 0
        assert type(page_size) == int and page_size > 0
        indexes = index_range(page, page_size)
        book = self.dataset()
        if indexes[1] < len(book):
            return book[indexes[0]: indexes[1]]
        return []

    def get_hyper(self, page_no: int = 1, page_size: int = 10):
        """ returns a dictionary containing
        the following key-value pairs:
        """
        page_content = self.get_page(page_no, page_size)
        total_pages = math.ceil(len(self.dataset()) / page_size)
        if page_no + 1 <= total_pages:
            next_page_no = page_no + 1
        else:
            next_page_no = None

        if page_no - 1 > 0:
            prev_page_no = page_no - 1
        else:
            prev_page_no = None
        dic = {
            "page_size": len(page_content),
            "page": page_no,
            "data": page_content,
            "next_page": next_page_no,
            "prev_page": prev_page_no,
            "total_pages": total_pages 
        }
        return dic
